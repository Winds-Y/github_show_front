{"version":3,"sources":["logo.svg","serviceWorker.js","components/Page1.js","components/Page2.js","components/Page3.js","components/Home.js","components/UserList.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","Page1","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","testStr","username","password","handleChange","bind","assertThisInitialized","event","console","log","target","name","value","inputName","inputValue","setState","defineProperty","_this2","formData","FormData","append","fetch","method","body","then","res","json","code","history","push","_this3","react_default","a","createElement","className","type","onChange","Button_default","onClick","e","onSubmit","React","Component","Page2","Page3","style","fontSize","textAlign","href","Home","react_router_dom","to","UserList","users","_this$state$users","map","_ref","id","email","age","city","gender","key","es_Button","ReactDOM","render","react_router","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mOCYpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,mKC8CSC,cA3DX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAM,CACPC,QAAQ,GACPC,SAAS,GACTC,SAAS,IAEdV,EAAKW,aAAaX,EAAKW,aAAaC,KAAlBX,OAAAY,EAAA,EAAAZ,CAAAD,IAPJA,4EASLc,GACTC,QAAQC,IAAI,aAAQF,EAAMG,OAAOC,MACjCH,QAAQC,IAAI,cAASF,EAAMG,OAAOE,OAClC,IAAIC,EAAUN,EAAMG,OAAOC,KACvBG,EAAWP,EAAMG,OAAOE,MAC5BhB,KAAKmB,SAALrB,OAAAsB,EAAA,EAAAtB,CAAA,GAESmB,EAAWC,uCAKd,IAAAG,EAAArB,KACFsB,EAAS,IAAIC,SACjBD,EAASE,OAAO,OAAO,SACvBF,EAASE,OAAO,WAAWxB,KAAKI,MAAME,UACtCgB,EAASE,OAAO,WAAWxB,KAAKI,MAAMG,UACtCkB,MAAM,8BAA8B,CAChCC,OAAO,OACPC,KAAKL,IACNM,KAAM,SAACC,GACN,OAAOA,EAAIC,SACZF,KAAM,SAACE,GACNlB,QAAQC,IAAIiB,GACG,MAAZA,EAAKC,MACJnB,QAAQC,IAAI,4BACZQ,EAAKzB,MAAMoC,QAAQC,KAAK,aACP,MAAZH,EAAKC,KACVnB,QAAQC,IAAI,kCACK,MAAZiB,EAAKC,MACVnB,QAAQC,IAAI,+DAIhB,IAAAqB,EAAAlC,KACJ,OACImC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAd,iBAGAH,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,SAAOtB,KAAK,WAAWwB,KAAK,OAAOvB,MAAOhB,KAAKI,MAAME,SAAUkC,SAAUxC,KAAKQ,eAC9E2B,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,SAAOtB,KAAK,WAAWwB,KAAK,WAAWvB,MAAOhB,KAAKI,MAAMG,SAAUiC,SAAUxC,KAAKQ,eAClF2B,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAQM,QAAS,SAAAC,GAAIT,EAAKU,SAASD,KAAnC,wBAtDIE,IAAMC,WCQXC,mLARP,OACIZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oCAJIQ,IAAMC,WCeXE,mLAZP,OACIb,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKY,MAAO,CACRC,SAAS,OACTC,UAAU,WAFd,iBAIAhB,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAQM,QAAS,WAAKnD,OAAOC,SAAS4D,KAAK,2BARvCP,IAAMC,WCeXO,mLAbP,OACIlB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,GAAG,UAAT,SACApB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,GAAG,UAAT,SACApB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,GAAG,UAAT,SACApB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,GAAG,aAAT,qBATDV,IAAMC,oDCCJU,cACjB,SAAAA,EAAY5D,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwD,IACd3D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0D,GAAArD,KAAAH,KAAMJ,KACDQ,MAAM,GAFGP,iNAyBU4B,MAAM,iEAAoCK,cAA9D2B,SACJ7C,QAAQC,IAAI4C,GACZzD,KAAKmB,SAAS,CAACsC,6IAEV,IAAApC,EAAArB,KAAA0D,EACU1D,KAAKI,MAAfqD,aADA,IAAAC,EACM,GADNA,EAGL,OACIvB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACbH,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,4BAGRF,EAAAC,EAAAC,cAAA,aACCoB,EAAME,IAAI,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,GAAG9C,EAAL6C,EAAK7C,KAAK+C,EAAVF,EAAUE,MAAMC,EAAhBH,EAAgBG,IAAIC,EAApBJ,EAAoBI,KAAKC,EAAzBL,EAAyBK,OAAO1D,EAAhCqD,EAAgCrD,SAAhC,OACP4B,EAAAC,EAAAC,cAAA,MAAI6B,IAAKL,GACL1B,EAAAC,EAAAC,cAAA,UAAKwB,GACL1B,EAAAC,EAAAC,cAAA,UAAKtB,GACLoB,EAAAC,EAAAC,cAAA,UAAK0B,GACL5B,EAAAC,EAAAC,cAAA,UAAKyB,GACL3B,EAAAC,EAAAC,cAAA,UAAK4B,GACL9B,EAAAC,EAAAC,cAAA,UAAK2B,GACL7B,EAAAC,EAAAC,cAAA,UAAK9B,GACL4B,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAQzB,QAAS,WAAKrB,EAAKF,SAAS,CAACsC,YAArC,8BA1DMX,aCStCsB,IAASC,OAEDlC,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACInB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOC,KAAM,IAAKC,UAAWnB,IAC7BlB,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOC,KAAM,SAAUC,UAAW7E,IAClCwC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOC,KAAM,SAAUC,UAAWzB,IAClCZ,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOC,KAAM,SAAUC,UAAWxB,IAClCb,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOC,KAAM,YAAaC,UAAWhB,MAIjDiB,SAASC,eAAe,SNwGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,KAAK,SAAAkD,GACjCA,EAAaC","file":"static/js/main.8be23111.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport '../css/main.css'\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nclass Page1 extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            testStr:''\r\n            ,username:''\r\n            ,password:''\r\n        };\r\n        this.handleChange=this.handleChange.bind(this);\r\n    }\r\n    handleChange(event){\r\n        console.log(\"name：\"+event.target.name);\r\n        console.log(\"value：\"+event.target.value);\r\n        let inputName=event.target.name;\r\n        let inputValue=event.target.value;\r\n        this.setState(\r\n            {\r\n                [inputName]:inputValue\r\n            }\r\n        );\r\n        // this.setState({testStr:event.target.value});\r\n    }\r\n    onSubmit(){\r\n        let formData=new FormData();\r\n        formData.append('mask',\"login\");\r\n        formData.append('username',this.state.username);\r\n        formData.append('password',this.state.password);\r\n        fetch('http://localhost:8080/login',{\r\n            method:'post',\r\n            body:formData\r\n        }).then( (res)=> {\r\n            return res.json();\r\n        }).then( (json)=> {\r\n            console.log(json);\r\n            if(json.code===200){\r\n                console.log(\"登陆成功\");\r\n                this.props.history.push('UserList');\r\n            }else if(json.code===404) {\r\n                console.log(\"没有该用户\");\r\n            }else if(json.code===500){\r\n                console.log(\"密码错误\");\r\n            }\r\n        })\r\n    }\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h1 className=\"mainDiv\">This is Page1</h1>\r\n                {/*<input name=\"testStr\" type=\"text\" value={this.state.testStr} onChange={this.handleChange}/>*/}\r\n                {/*<h4>{this.state.testStr}</h4>*/}\r\n                <label>用户名：</label>\r\n                <input name=\"username\" type=\"text\" value={this.state.username} onChange={this.handleChange}/>\r\n                <label>密码：</label>\r\n                <input name=\"password\" type=\"password\" value={this.state.password} onChange={this.handleChange}/>\r\n                <Button onClick={e=>{this.onSubmit(e)}} >登陆</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Page1;\r\n","import React from 'react'\r\n\r\nclass Page2 extends React.Component{\r\n    render(){\r\n        return (\r\n            <div>\r\n                <div>This is page2</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Page2;","import React from 'react'\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nclass Page3 extends React.Component{\r\n    render(){\r\n        return (\r\n            <div>\r\n                <div style={{\r\n                    fontSize:'16px',\r\n                    textAlign:'center'\r\n                }}>This is Page3</div>\r\n                <Button onClick={()=>{window.location.href=\"www.baidu.com\"}}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Page3;","import React from 'react'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass Home extends React.Component{\r\n    render(){\r\n        return (\r\n            <div>\r\n                <div>This is Home</div>\r\n                <div>\r\n                    <Link to=\"/Page1\">Page1</Link>\r\n                    <Link to=\"/Page2\">Page2</Link>\r\n                    <Link to=\"/Page3\">Page3</Link>\r\n                    <Link to=\"/UserList\">UserList</Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Home;","import React,{Component} from \"react\";\r\nimport 'whatwg-fetch'\r\nimport {Button} from 'react-bootstrap'\r\n\r\nexport default class UserList extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={}\r\n    }\r\n    async componentDidMount(){\r\n        //方法1：\r\n        // axios.get('http://localhost:8080/api/users').then(res=>{\r\n        //     console.log(res)\r\n        // });\r\n\r\n        //方法2：\r\n        // const myRquest = new Request('http://localhost:8080/api/users');\r\n        // fetch(myRquest,{\r\n        //     method:\"GET\",\r\n        //     mode:\"cors\"\r\n        //     ,headers:{\r\n        //         'Accept': 'application/json, text/plain, */*'\r\n        //     }\r\n        // }).then(function (response) {\r\n        //     return response.json().then(function (json) {\r\n        //         console.log(json);\r\n        //     })\r\n        // });\r\n\r\n        //方法3：\r\n        let users =await (await fetch('http://localhost:8080/api/users')).json();\r\n        console.log(users);\r\n        this.setState({users});\r\n    }\r\n    render() {\r\n        let {users=[]}=this.state;\r\n\r\n        return (\r\n            <div>\r\n                <table className='table'>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>id</th>\r\n                            <th>姓名</th>\r\n                            <th>年龄</th>\r\n                            <th>邮箱</th>\r\n                            <th>性别</th>\r\n                            <th>城市</th>\r\n                            <th>密码</th>\r\n                        </tr>\r\n                    </tbody>\r\n                    <tbody>\r\n                    {users.map(({id,name,email,age,city,gender,password})=>\r\n                        <tr key={id}>\r\n                            <td>{id}</td>\r\n                            <td>{name}</td>\r\n                            <td>{age}</td>\r\n                            <td>{email}</td>\r\n                            <td>{gender}</td>\r\n                            <td>{city}</td>\r\n                            <td>{password}</td>\r\n                            <td>\r\n                                <Button onClick={()=>{this.setState({users});}}>配置</Button>\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter, Route} from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport Page1 from './components/Page1'\nimport Page2 from './components/Page2'\nimport Page3 from './components/Page3'\nimport Home from './components/Home'\nimport UserList from './components/UserList';\n\nReactDOM.render(\n    (\n        <BrowserRouter>\n            <div>\n                <Route path={'/'} component={Home}/>\n                <Route path={'/Page1'} component={Page1}/>\n                <Route path={'/Page2'} component={Page2}/>\n                <Route path={'/Page3'} component={Page3}/>\n                <Route path={'/UserList'} component={UserList}/>\n            </div>\n        </BrowserRouter>\n    ),\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}